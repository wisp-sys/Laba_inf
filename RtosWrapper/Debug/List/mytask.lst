###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         06/Mar/2021  10:29:05
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\MyTasks\mytask.cpp
#    Command line =
#        -f C:\Users\BA60~1\AppData\Local\Temp\EWEFB2.tmp
#        (C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\MyTasks\mytask.cpp
#        -lC C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Debug\List -lA
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Debug\List -o
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\wrapper\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\wrapper\FreeRtos\
#        -I C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\include\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\portable\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\portable\Common\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\portable\IAR\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\portable\IAR\ARM_CM4F\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Rtos\FreeRtos\portable\MemMang\
#        -I C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\MyTasks\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Common\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\CMSIS\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Application\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Application\Diagnostic\
#        -I C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\AHardware\ -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\AHardware\GpioPort\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\AHardware\IrqController\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\AbstractHardware\Pin\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\FieldValues\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\AbstractHardware\Registers\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\AbstractHardware\Port\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\AbstractHardware\Atomic\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\Common\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\Common\Singleton\
#        -I
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\..\CortexLib\Common\RomObject\
#        -Ol --c++ --no_exceptions --no_rtti)
#    Locale       =  C
#    List file    =
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Debug\List\mytask.lst
#    Object file  =
#        C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Debug\Obj\mytask.o
#
###############################################################################

C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\MyTasks\mytask.cpp
      1          /*******************************************************************************
Warning[Ms014]: some characters could not be correctly encoded in
          "C:\Users\@@@@@@@\Desktop\Karcas\RtosWrapper\Debug\List\mytask.s",
          and have been replaced with '@'. The first such character has unicode
          code point 0x421 ("@")
      2          * Filename  	: mytask.cpp
      3          * 
      4          * Details   	: Implementation of Execute() of MyTask class
      5          *
      6          * Author        : Sergey Kolody
      7          *******************************************************************************/
      8          #include "mytask.hpp"

   \                                 In section .text, align 2
   \   __interwork __vfp OsWrapper::TicksPerSecond std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
   \                     _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
   \        0x2   0x....'....        BL       _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv
   \        0x6   0x220A             MOVS     R2,#+10
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0x....'....        BL       __aeabi_ldivmod
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0xA901             ADD      R1,SP,#+4
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_
   \       0x18   0x9800             LDR      R0,[SP, #+0]
   \       0x1A   0xBD0E             POP      {R1-R3,PC}       ;; return

   \                                 In section .text, align 2
   \   __code __interwork __vfp std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
   \                     _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_: (+1)
   \        0x0   0x6809             LDR      R1,[R1, #+0]
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp __int64_t std::chrono::duration<__int64_t, std::milli>::count() const
   \                     _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv: (+1)
   \        0x0   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp uint32_t std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
   \                     _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 1
   \   __absolute bool const std::chrono::system_clock::is_steady
   \                     _ZNSt6chrono12system_clock9is_steadyE:
   \        0x0   0x00               DC8 0

   \                                 In section .rodata, align 1
   \   __absolute bool const std::chrono::system_clock::is_monotonic
   \                     _ZNSt6chrono12system_clock12is_monotonicE:
   \        0x0   0x00               DC8 0

   \                                 In section .rodata, align 1
   \   __absolute bool const std::chrono::steady_clock::is_steady
   \                     _ZNSt6chrono12steady_clock9is_steadyE:
   \        0x0   0x01               DC8 1

   \                                 In section .text, align 2
   \   __interwork __vfp void OsWrapper::RtosWrapper::wSleep(uint32_t)
   \                     _ZN9OsWrapper11RtosWrapper6wSleepEj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       vTaskDelay
   \        0x6   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __vfp void OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
   \                     _ZN9OsWrapper11RtosWrapper12wSignalEventERKPvj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x000A             MOVS     R2,R1
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9100             STR      R1,[SP, #+0]
   \        0x8   0x466B             MOV      R3,SP
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0x4808             LDR.N    R0,??wSignalEvent_0
   \        0xE   0x....'....        BL       xTimerPendFunctionCallFromISR
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD00A             BEQ.N    ??wSignalEvent_1
   \       0x16   0x9800             LDR      R0,[SP, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD007             BEQ.N    ??wSignalEvent_1
   \       0x1C   0xF05F 0x5080      MOVS     R0,#+268435456
   \       0x20   0x4904             LDR.N    R1,??wSignalEvent_0+0x4  ;; 0xe000ed04
   \       0x22   0x6008             STR      R0,[R1, #+0]
   \       0x24   0xF3BF 0x8F4F      DSB      SY
   \       0x28   0xF3BF 0x8F6F      ISB      SY
   \                     ??wSignalEvent_1: (+1)
   \       0x2C   0xBD01             POP      {R0,PC}          ;; return
   \       0x2E   0xBF00             Nop      
   \                     ??wSignalEvent_0:
   \       0x30   0x....'....        DC32     vEventGroupSetBitsCallback
   \       0x34   0xE000'ED04        DC32     0xe000ed04

   \                                 In section .text, align 2
   \   __interwork __vfp void OsWrapper::IThread::Sleep(std::chrono::milliseconds)
   \                     _ZN9OsWrapper7IThread5SleepENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE: (+1)
   \        0x0   0xB583             PUSH     {R0,R1,R7,LR}
   \        0x2   0xB082             SUB      SP,SP,#+8
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x....'....        BL       _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv
   \       0x12   0x....'....        BL       _ZN9OsWrapper11RtosWrapper6wSleepEj
   \       0x16   0xB005             ADD      SP,SP,#+20
   \       0x18   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4
   \   __interwork __vfp uint32_t RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
   \                     _ZN12RegisterBaseILj1073874960ELj32E8ReadModeE3GetIS0_vEEjv: (+1)
   \        0x0   0x4801             LDR.N    R0,??Get_0       ;; 0x40020810
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
   \        0x6   0xBF00             Nop      
   \                     ??Get_0:
   \        0x8   0x4002'0810        DC32     0x40020810

   \                                 In section .text, align 2
   \   __interwork __vfp unsigned int Pin<Port<GPIOC>, (uint8_t)'\r', PinReadable>::Get<PinReadable, void>()
   \                     _ZN3PinI4PortI5GPIOCELh13E11PinReadablevE3GetIS3_vEEDav: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN4PortI5GPIOCE3GetEv
   \        0x6   0xF3C0 0x3040      UBFX     R0,R0,#+13,#+1
   \        0xA   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp uint32_t Port<GPIOC>::Get()
   \                     _ZN4PortI5GPIOCE3GetEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN12RegisterBaseILj1073874960ELj32E8ReadModeE3GetIS0_vEEjv
   \        0x6   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp bool Button<PinButton>::IsPressed() const
   \                     _ZNK6ButtonI3PinI4PortI5GPIOCELh13E11PinReadablevEE9IsPressedEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN3PinI4PortI5GPIOCELh13E11PinReadablevE3GetIS3_vEEDav
   \        0x6   0x2801             CMP      R0,#+1
   \        0x8   0xD001             BEQ.N    ??IsPressed_0
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B.N      ??IsPressed_1
   \                     ??IsPressed_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \                     ??IsPressed_1: (+1)
   \       0x10   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x12   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp void OsWrapper::Event::Signal()
   \                     _ZN9OsWrapper5Event6SignalEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x6A01             LDR      R1,[R0, #+32]
   \        0x4   0x....'....        BL       _ZN9OsWrapper11RtosWrapper12wSignalEventERKPvj
   \        0x8   0xBD01             POP      {R0,PC}          ;; return
      9          

   \                                 In section .text, align 4, keep-with-next
     10          void MyTask::Execute()
     11          { 
   \                     _ZN6MyTask7ExecuteEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     12            while(true) 
     13            {
     14              if (button.IsPressed())
   \                     ??Execute_1: (+1)
   \        0x4   0xF8D4 0x0260      LDR      R0,[R4, #+608]
   \        0x8   0x....'....        BL       _ZNK6ButtonI3PinI4PortI5GPIOCELh13E11PinReadablevEE9IsPressedEv
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD003             BEQ.N    ??Execute_2
     15              {
     16                event.Signal();
   \       0x10   0xF8D4 0x025C      LDR      R0,[R4, #+604]
   \       0x14   0x....'....        BL       _ZN9OsWrapper5Event6SignalEv
   \                     ??Execute_2: (+1)
   \       0x18   0x4A02             LDR.N    R2,??Execute_0
   \       0x1A   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
     17              }
     18              Sleep(300ms);
   \       0x1E   0x....'....        BL       _ZN9OsWrapper7IThread5SleepENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE
   \       0x22   0xE7EF             B.N      ??Execute_1
   \                     ??Execute_0:
   \       0x24   0x....'....        DC32     ?_0
     19            }
     20          };

   \                                 In section .rodata, align 8
   \                     ?_0:
   \        0x0   0x0000'0000'0      DC64 300
   \              000'012C     

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Button<PinButton>::IsPressed() const
         8   -> Pin<Port<GPIOC>, (uint8_t)'\r', PinReadable>::Get<PinReadable, void>()
       8   MyTask::Execute()
         8   -> Button<PinButton>::IsPressed() const
         8   -> OsWrapper::Event::Signal()
         8   -> OsWrapper::IThread::Sleep(std::chrono::milliseconds)
       8   OsWrapper::Event::Signal()
         8   -> OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
      24   OsWrapper::IThread::Sleep(std::chrono::milliseconds)
        24   -> OsWrapper::RtosWrapper::wSleep(uint32_t)
        24   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
        24   -> std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
       8   OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
         8   -> xTimerPendFunctionCallFromISR
       8   OsWrapper::RtosWrapper::wSleep(uint32_t)
         8   -> vTaskDelay
       8   Pin<Port<GPIOC>, (uint8_t)'\r', PinReadable>::Get<PinReadable, void>()
         8   -> Port<GPIOC>::Get()
       8   Port<GPIOC>::Get()
         8   -> RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
       0   RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
       0   std::chrono::duration<__int64_t, std::milli>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
      16   std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
        16   -> std::chrono::duration<__int64_t, std::milli>::count() const
        16   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
        16 __aeabi_ldivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?_0
      20  Button<PinButton>::IsPressed() const
      40  MyTask::Execute()
      10  OsWrapper::Event::Signal()
      26  OsWrapper::IThread::Sleep(std::chrono::milliseconds)
      56  OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
       8  OsWrapper::RtosWrapper::wSleep(uint32_t)
      12  Pin<Port<GPIOC>, (uint8_t)'\r', PinReadable>::Get<PinReadable, void>()
       8  Port<GPIOC>::Get()
      12  RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
       6  std::chrono::duration<__int64_t, std::milli>::count() const
       4  std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
       6  std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
      28  std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
       1  std::chrono::steady_clock::is_steady
       1  std::chrono::system_clock::is_monotonic
       1  std::chrono::system_clock::is_steady
     128  -- Other

 
 139 bytes in section .rodata
 236 bytes in section .text
 
 40 bytes of CODE  memory (+ 196 bytes shared)
  8 bytes of CONST memory (+ 131 bytes shared)

Errors: none
Warnings: 1
